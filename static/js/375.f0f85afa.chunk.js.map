{"version":3,"file":"static/js/375.f0f85afa.chunk.js","mappings":"wIAMA,IANiB,WACfA,OAAOC,SAAS,CACdC,IAAK,IACLC,SAAU,a,uICCDC,EAAoB,WAC/B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,2FACEH,GAAW,GADb,mBAG4BI,EAAAA,EAAAA,IAAaV,GAHzC,OAGUG,EAHV,OAIIC,EAAaD,GAJjB,gDAMIQ,QAAQC,IAAR,MACAJ,EAAS,EAAD,IAPZ,yBASIF,GAAW,IACXV,EAAAA,EAAAA,KAVJ,6EAFc,sBACde,QAAQC,IAAI,iBADE,mCAedC,KACC,CAACb,IACG,CAAEG,UAAAA,EAAWE,QAAAA,EAASE,MAAAA,K,0GCtBlBO,EAAO,WAClB,OAA6Bf,EAAAA,EAAAA,KAArBI,EAAR,EAAQA,UAAWI,EAAnB,EAAmBA,MACnB,OACE,SAAC,EAAAQ,SAAD,WACIR,GACAJ,GACAA,EAAUa,KAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAArB,OACjB,UAAC,EAAAC,SAAD,YAEI,gBACEC,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAKJ,KAGT,uBAAIA,MAXSF,U,iKCVZH,EAAWU,EAAAA,GAAAA,GAAH,sGAMRJ,EAAWI,EAAAA,GAAAA,GAAH,sFAKRC,EAAgBD,EAAAA,GAAAA,IAAH,qG,0MCX1BE,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,WAAMC,GAAN,yFACLH,IAAAA,IAAA,uCACWC,EADX,iBAC2BE,IAFtB,uBACpBC,EADoB,EACpBA,KAGRpB,QAAQC,IAAI,eAJgB,kBAKrBmB,EAAKC,SALgB,2CAAH,sDAQdC,EAAY,mCAAG,WAAMjC,GAAN,yFACH2B,IAAAA,IAAA,iBAAoB3B,EAApB,oBAAuC4B,IADpC,uBAClBG,EADkB,EAClBA,KACRpB,QAAQC,IAAI,aAFc,kBAGnBmB,GAHmB,2CAAH,sDAMZrB,EAAY,mCAAG,WAAMV,GAAN,yFACH2B,IAAAA,IAAA,iBACX3B,EADW,4BACgB4B,IAFb,uBAClBG,EADkB,EAClBA,KAGRpB,QAAQC,IAAI,aAJc,kBAKnBmB,GALmB,2CAAH,sDAQZG,EAAe,mCAAG,WAAMlC,GAAN,yFACN2B,IAAAA,IAAA,iBACX3B,EADW,4BACgB4B,IAFV,uBACrBG,EADqB,EACrBA,KAGRpB,QAAQC,IAAI,gBAJiB,kBAMtBmB,EAAKC,SANiB,2CAAH,sDASfG,EAAe,mCAAG,WAAOC,EAAON,GAAd,yFACNH,IAAAA,IAAA,gCACIC,EADJ,gCACmCE,EADnC,kBACiDM,IAF3C,uBACrBL,EADqB,EACrBA,KAGRpB,QAAQC,IAAI,gBAJiB,kBAKtBmB,EAAKC,SALiB,2CAAH,yD","sources":["components/ScrollBy.js","hooks/useFetchMovieCast.js","pages/Cast/Cast.js","pages/Cast/Cast.styled.js","services/MoviesApi.js"],"sourcesContent":["const scrollBy = () => {\n  window.scrollBy({\n    top: 600,\n    behavior: 'smooth',\n  });\n};\nexport default scrollBy;\n","import { useEffect, useState } from 'react';\nimport { getMovieCast } from 'services';\nimport { useParams } from 'react-router-dom';\nimport scrollBy from '../components/ScrollBy';\nexport const useFetchMovieCast = () => {\n  const { movieId } = useParams();\n  const [movieById, setMovieById] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('useFetch CAST');\n    async function fetchMovieCast() {\n      setLoading(true);\n      try {\n        const movieById = await getMovieCast(movieId);\n        setMovieById(movieById);\n      } catch (error) {\n        console.log(error);\n        setError(error);\n      } finally {\n        setLoading(false);\n        scrollBy();\n      }\n    }\n    fetchMovieCast();\n  }, [movieId]);\n  return { movieById, loading, error };\n};\n","import PropTypes from 'prop-types';\nimport { useFetchMovieCast } from 'hooks/useFetchMovieCast';\nimport { CastList, CastItem } from './Cast.styled';\nimport inconito from '../../images/inconito.jpg';\nexport const Cast = () => {\n  const { movieById, error } = useFetchMovieCast();\n  return (\n    <CastList>\n      {!error &&\n        movieById &&\n        movieById.cast.map(({ id, profile_path, original_name }) => (\n          <CastItem key={id}>\n            {\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                    : inconito\n                }\n                alt={original_name}\n              />\n            }\n            <p>{original_name}</p>\n          </CastItem>\n        ))}\n    </CastList>\n  );\n};\nCast.propTypes = {\n  movieById: PropTypes.arrayOf({\n    cast: PropTypes.arrayOf({\n      id: PropTypes.number,\n      profile_path: PropTypes.string,\n      original_name: PropTypes.string,\n    }),\n  }),\n};\n","import styled from 'styled-components';\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px;\n  max-width: 1200px;\n`;\nexport const CastItem = styled.li`\n  background-color: gray;\n  margin: 30px;\n  padding: 10px;\n`;\nexport const BackgroundImg = styled.img`\n  max-width: 200px;\n  background-image: url('../../images/inconito.jpg');\n`;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e815f38922cafca80c1f07403a692f09';\n\nexport const getTrendMovies = async page => {\n  const { data } = await axios.get(\n    `/trending/movie/week?api_key=${API_KEY}&page=${page}`\n  );\n  console.log('TrendMovies');\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  console.log('MovieById');\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  console.log('MovieCast');\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  console.log('MovieReviews');\n\n  return data.results;\n};\n\nexport const getSearchMovies = async (movie, page) => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${movie}`\n  );\n  console.log('SearchMovies');\n  return data.results;\n};\n"],"names":["window","scrollBy","top","behavior","useFetchMovieCast","movieId","useParams","useState","movieById","setMovieById","loading","setLoading","error","setError","useEffect","getMovieCast","console","log","fetchMovieCast","Cast","CastList","cast","map","id","profile_path","original_name","CastItem","src","inconito","alt","styled","BackgroundImg","axios","API_KEY","getTrendMovies","page","data","results","getMovieById","getMovieReviews","getSearchMovies","movie"],"sourceRoot":""}