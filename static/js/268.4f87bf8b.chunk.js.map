{"version":3,"file":"static/js/268.4f87bf8b.chunk.js","mappings":"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","sources":["components/ScrollBy.js","hooks/useFetchMovieById.js","hooks/useFetchMovieReviews.js","hooks/useFetchMovieCast.js","hooks/useFetchSearchMovies.js","hooks/useFetchTrendMovies.js","pages/MovieCard/MovieCard.js","pages/MovieCard/MovieCard.styled.js","services/MoviesApi.js"],"sourcesContent":["const scrollBy = () => {\n  window.scrollBy({\n    top: 600,\n    behavior: 'smooth',\n  });\n};\nexport default scrollBy;\n","import { useEffect, useState } from 'react';\nimport { getMovieById } from 'services';\nimport { useParams } from 'react-router-dom';\nexport const useFetchMovieById = () => {\n  const { movieId } = useParams();\n  const [movieById, setMovieById] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('useFetch MOVIE BY ID');\n    async function fetchMovieById() {\n      setLoading(true);\n      try {\n        const movieById = await getMovieById(movieId);\n        setMovieById(movieById);\n      } catch (error) {\n        console.log(error);\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchMovieById();\n  }, [movieId]);\n  return { movieById, loading, error };\n};\n","import { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'services';\nimport { useParams } from 'react-router-dom';\nimport scrollBy from '../components/ScrollBy';\nexport const useFetchMovieReviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setMovieReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('useFetch REVIEW');\n    async function fetchMovieReviews() {\n      setLoading(true);\n      try {\n        const reviews = await getMovieReviews(movieId);\n        setMovieReviews(reviews);\n      } catch (error) {\n        console.log(error);\n        setError(error);\n      } finally {\n        setLoading(false);\n        scrollBy();\n      }\n    }\n    fetchMovieReviews();\n  }, [movieId]);\n  return { reviews, loading, error };\n};\n","import { useEffect, useState } from 'react';\nimport { getMovieCast } from 'services';\nimport { useParams } from 'react-router-dom';\nimport scrollBy from '../components/ScrollBy';\nexport const useFetchMovieCast = () => {\n  const { movieId } = useParams();\n  const [movieById, setMovieById] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('useFetch CAST');\n    async function fetchMovieCast() {\n      setLoading(true);\n      try {\n        const movieById = await getMovieCast(movieId);\n        setMovieById(movieById);\n      } catch (error) {\n        console.log(error);\n        setError(error);\n      } finally {\n        setLoading(false);\n        scrollBy();\n      }\n    }\n    fetchMovieCast();\n  }, [movieId]);\n  return { movieById, loading, error };\n};\n","import { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { getSearchMovies } from 'services';\nimport scrollBy from '../components/ScrollBy';\nexport const useFetchSearchMovies = () => {\n  const [listMovies, setListMovies] = useState([]);\n  const [nameMovies, setNameMovies] = useState('');\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('useFetch SearchMovies');\n    if (nameMovies === '') {\n      return;\n    }\n    async function fetchSearchMovies() {\n      try {\n        const results = await getSearchMovies(nameMovies, page);\n        if (results.length === 0) {\n          toast.error('Cannot find your request!');\n        }\n        setListMovies(listMovies => [...listMovies, ...results]);\n      } catch (error) {\n        setError(error);\n      } finally {\n        if (page !== 1) {\n          scrollBy();\n        }\n      }\n    }\n    fetchSearchMovies();\n  }, [nameMovies, page]);\n  const handleLoadMore = () => {\n    setPage(page => page + 1);\n  };\n  const handleSearchMovies = searchMovies => {\n    setNameMovies(searchMovies);\n    setListMovies([]);\n  };\n  return { listMovies, error, handleSearchMovies, handleLoadMore };\n};\n","import { useEffect, useState } from 'react';\nimport { getTrendMovies } from 'services/MoviesApi';\nimport scrollBy from '../components/ScrollBy';\nexport const useFetchTrendMovies = () => {\n  const [trendMovies, setTrendMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('useFetch TrendMovies');\n    async function fetchTrendMovies() {\n      setLoading(true);\n      try {\n        const result = await getTrendMovies(page);\n        setTrendMovies(trendMovies => [...trendMovies, ...result]);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n        if (page !== 1) {\n          scrollBy();\n        }\n      }\n    }\n    fetchTrendMovies();\n  }, [page]);\n  const handleLoadMore = () => {\n    setPage(page => page + 1);\n  };\n  return { trendMovies, loading, error, handleLoadMore };\n};\n","import PropTypes from 'prop-types';\nimport { useFetchMovieById } from 'hooks';\nimport { LayoutFeatureMovie } from '../../components/layout/Layout';\nimport { Card, Description, VoteAverage } from './MovieCard.styled';\nimport { Link, useLocation } from 'react-router-dom';\nimport { BsFillCaretLeftFill, BsFillStarFill } from 'react-icons/bs';\nimport noPoster from '../../images/noPoster.jpg';\nexport const MovieCard = () => {\n  const location = useLocation();\n  const { movieById, error } = useFetchMovieById();\n  console.log(movieById);\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/'}>\n        <BsFillCaretLeftFill />\n        Go Back\n      </Link>\n      {!error && movieById && (\n        <Card>\n          <img\n            src={\n              movieById.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movieById.poster_path}`\n                : noPoster\n            }\n            alt={movieById.original_title}\n          />\n          <Description>\n            <h1>{movieById.original_title}</h1>\n            <VoteAverage>\n              <span>\n                <BsFillStarFill />\n              </span>\n              {movieById.vote_average}\n            </VoteAverage>\n            <h2>Overview</h2>\n            <p>{movieById.overview}</p>\n            <h2>Genres</h2>\n            <p>\n              {movieById.genres.map(genre => (\n                <span key={genre.id}>{genre.name}</span>\n              ))}\n            </p>\n          </Description>\n        </Card>\n      )}\n      <div>\n        <LayoutFeatureMovie />\n      </div>\n    </>\n  );\n};\nMovieCard.propTypes = {\n  movieById: PropTypes.objectOf({\n    id: PropTypes.number,\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string,\n    overview: PropTypes.string,\n    vote_average: PropTypes.string,\n    genres: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  }),\n};\n","import styled from 'styled-components';\nexport const Card = styled.div`\n  display: flex;\n  align-items: flex-start;\n  margin-right: 40px;\n  margin-bottom: 40px;\n  max-width: 1000px;\n  background-color: #c4c4c4;\n`;\nexport const Description = styled.div`\n  padding: 40px;\n`;\nexport const SecondTitle = styled.h2`\n  color: gray;\n`;\nexport const Genres = styled.p`\n  padding-left: 4px;\n`;\nexport const VoteAverage = styled.p`\n  display: flex;\n  padding-left: 4px;\n`;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e815f38922cafca80c1f07403a692f09';\n\nexport const getTrendMovies = async page => {\n  const { data } = await axios.get(\n    `/trending/movie/week?api_key=${API_KEY}&page=${page}`\n  );\n  console.log('TrendMovies');\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  console.log('MovieById');\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  console.log('MovieCast');\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  console.log('MovieReviews');\n\n  return data.results;\n};\n\nexport const getSearchMovies = async (movie, page) => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${movie}`\n  );\n  console.log('SearchMovies');\n  return data.results;\n};\n"],"names":["window","scrollBy","top","behavior","useFetchMovieById","movieId","useParams","useState","movieById","setMovieById","loading","setLoading","error","setError","useEffect","getMovieById","console","log","fetchMovieById","useFetchMovieReviews","reviews","setMovieReviews","getMovieReviews","fetchMovieReviews","useFetchMovieCast","getMovieCast","fetchMovieCast","useFetchSearchMovies","listMovies","setListMovies","nameMovies","setNameMovies","page","setPage","getSearchMovies","results","length","toast","fetchSearchMovies","handleSearchMovies","searchMovies","handleLoadMore","useFetchTrendMovies","trendMovies","setTrendMovies","getTrendMovies","result","fetchTrendMovies","MovieCard","location","useLocation","to","state","from","Card","src","poster_path","noPoster","alt","original_title","Description","VoteAverage","vote_average","overview","genres","map","genre","name","id","styled","SecondTitle","Genres","axios","API_KEY","data","movie"],"sourceRoot":""}